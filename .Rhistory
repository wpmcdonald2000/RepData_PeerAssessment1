data(airquality)
pairs(airquality)
step(lm(Ozone~., data = airquality))
str(airquality)
airquality$Month <- as.factor(airquality$Month)
pairs(airquality)
step(lm(Ozone~., data = airquality))
set.seed(1)
?runif
a<- x<- runif(158)
b<- y<- runif(158)
u <- runif(158)
v<- runif(158)
plot(x~y)
plot(x~y)
r <- .5
s <- .5
plot(a~b, pch = "+")
points(x,y,pch = "+")
for (n in 2:length(a)) {
if (u[n] >= r) {
x[n] <- s*v[n]*a[n] + (1-s*v[n])*x[n-1]
y[n] <- s*v[n]*b[n] + (1-s*v[n])*y[n-1]
}
}
plot(a~b, pch = "+")
points(x,y,pch = "+")
r <- .1
s<-.4
for (n in 2:length(a)) {
if (u[n] >= r) {
x[n] <- s*v[n]*a[n] + (1-s*v[n])*x[n-1]
y[n] <- s*v[n]*b[n] + (1-s*v[n])*y[n-1]
}
}
plot(a~b, pch = "+")
points(x,y,pch = "+")
mean(c(80,125,140,85))
sd(c(1,2,3,4,5))
mean(c(1,2,3,4,5))
var(c(1,2,3,4,5))
sqrt(var(c(1,2,3,4,5)))
?t.test
qnorm(.05)
12 - (qnorm(.05)*4/10)
x <- c(140, 138, 150, 148,135)
y <- c(132,135,151,146,130)
t.test(x,y)
t.test(x,y, alternative = "two.sided")
1100 + c(-1,1)*qnorm(.05)*30/3
t.test(x,y, paired = FALSE, alternative = "two.sided")
data(mtcars)
m4 <- mtcars$mpg[mtcars$cyl == 4]
m6 <- mtcars$mpg[mtcars$cyl == 6]
t.test(m4,m6, paired = FALSE, alternative = "two.sided")
t.test(x,y, paired = FALSE, alternative = "two.sided")
x
y
qnorm(.025)
1100 + c(-1,1)*qnorm(.025)*30/3
t.test(y,x, paired = FALSE, alternative = "two.sided")
t.test(y~x, paired = FALSE, alternative = "two.sided")
t.test(y,x, paired = FALSE, alternative = "two.sided")
mean(x)
mean(y)
t.test(y,x, paired = TRUE, alternative = "two.sided")
pbinom(2,.5,4)
pbinom(2,prob = .5,size = 4, lower.tail = FALSE)
qnorm(.025)
69/qnorm(.025)
69/qnorm(.05)
3.0 +c(-1,1)*3.0*1.1/10
3.0 +c(-1,1)*qnorm(.025)*1.1/10
3.0 +c(-1,1)*(round(qnorm(.025)*1.1/10),2)
(round(3.0 +c(-1,1)*qnorm(.025)*1.1/10),2)
round((3.0 +c(-1,1)*qnorm(.025)*1.1/10),2)
ppois(10, lambda = 17.87, lower.tail = FALSE)
ppois(10, lambda = 17.87, lower.tail = TRUE)
se <- .3*(sqrt(2/9))
ts <- -4/se
pnorm(abs(ts))
1/.04
(qnorm(.95)+qnorm(.9))^2* .04^2/.01^2
.01/(.04/sqrt(100))
.01/(.04/sqrt(100))+qnorm(.95)
pnorm(1)
pnorm(1)*2
pnorm(1.96)
10/4*sqrt(2)
1/(10/4*sqrt(2))
pnorm(1/(10/4*sqrt(2)))
se <- 12*sqrt(1/288 + 1/288)
ts <- 1.96/se
2*pnorm(-abs(ts))
se <-sqrt(1.8^2/288 + 1.5^2/288)
ts <- -4/se
2*pnorm(-abs(ts))
round((3.0 +c(-1,1)*qnorm(.025)*1.1/10),2)
1100 + qnorm(.05)*30/3)
1100 + qnorm(.05)*30/3
1100 +c(-1,1)*qnorm(.025)*30/13
qnorm(.975)
1100 +c(-1,1)*qnorm(.025)*30/3
qnorm(.95)
12 + qnorm(.95)*4/10
qnorm(.975)
qnorm(.975)*30/3
qnorm(.05)*30/3
qnorm(.025)*30/3
qnorm(.05)*30/3
qt(.975)
?qt
qt(.975,df = 8)
qt(.975,df = 8)*10
qt(.975,df = 8)*10+1100
str(mtcars)
manual <- mtcars[mtcars$am == 1,]
manual
automatic <- mtcars[mtcars$am == 0,]
automatic
step(lm(mpg~., data = manual))
manual
str(manual)
manual$cyl <- as.factor(manual$cyl)
manual$vs <- as.factor(manual$vs)
manual$am <- as.factor(manual$am)
manual$gear <- as.factor(manual$gear)
manual$carb <- as.factor(manual$carb)
step(lm(mpg~., data = manual))
atr(mtcars)
str(mtcars)
step(lm(mpg~., data = mtcars))
mtcars$am <-as.factor(mtcars$am)
mtcars$cyl <-as.factor(mtcars$cyl)
mtcars$vs <-as.factor(mtcars$vs)
mtcars$gears <-as.factor(mtcars$gears)
mtcars$gear <-as.factor(mtcars$gear)
mtcars$carb <-as.factor(mtcars$carb)
step(lm(mpg~., data = mtcars))
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?shuttle
data(menarche)
str(menarche)
plot(Menarche/Total ! Age, data = menarche)
plot(Menarche/Total ~ Age, data = menarche)
glm.out <- glm(cbind(Menarche, Total-Menarche)~Age, family = binomial(logit), data = eanrche)
glm.out <- glm(cbind(Menarche, Total-Menarche)~Age, family = binomial(logit), data = menarche)
glm.out
summary(glm.out)
data(shuttle)
str(shuttle)
glm(use~wind, family = binomial, data = shuttle)
quiz1 <- glm(use~wind, family = binomial, data = shuttle)
summary(quiz1)
quiz1$odds
quiz1$coef
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x <- -5:5
plot(x~y)
?knot
quiz1$coef
exp(quiz1$coef)
str(shuttle)
quiz1 <- glm(use~wind + as.factor(magn), family = binomial, data = shuttle)
exp(quiz1$coef)
1.4615736/.9684981
.9684981/1.4615736
quiz1 <- glm(use~wind + as.factor(magn), family = "binomial", data = shuttle)
exp(quiz1$coef)
1.0665323/.9684981
1/(1.0665323/.9684981)
.6952323/.9684981
1/(.6952323/.9684981)
quiz1 <- glm(use~wind, family = "binomial", data = shuttle)
exp(quiz1$coef)
quiz1 <- glm(use~wind + as.factor(magn), family = "binomial", data = shuttle)
exp(quiz1$coef)
1.46/.969
data(InsectSprays)
outp <- exp(coef(glm(count ~ as.factor(spray) - 1, family="poisson", InsectSprays)))
outp
outp1
outp[1]
outp[1]/output[2]
outp[1]/outp[2]
log(10)
?offset
offset(log(10))
plot(y~x)
d1 <- c(0, 0 ,0, 0, 0,  0,  1 , 1,  1 , 1 , 1)
d2 <- c(1, 1 ,1, 1, 1,  1,  0 , 0,  0, 0 , 0)
summary(lm(y ~ d1*x))
quiz1 <- glm(use~wind, family = "binomial", data = shuttle)
quiz2 <- glm((1-use)~wind, family = "binomial", data = shuttle)
quiz2 <- glm((use~(1-wind), family = "binomial", data = shuttle)
quiz2 <- glm(l(1-use)~wind, family = "binomial", data = shuttle)
quiz2 <- glm(1(1-use)~wind, family = "binomial", data = shuttle)
quiz2 <- glm(1(1-as.numeric(use))~wind, family = "binomial", data = shuttle)
quiz2 <- glm(1-as.numeric(use)~wind, family = "binomial", data = shuttle)
quiz2 <- glm(l(1-as.numeric(use))~wind, family = "binomial", data = shuttle)
quiz2 <- glm((1-as.numeric(use))~wind, family = "binomial", data = shuttle)
shuttle$use
str(shuttle)
shuttle$use1 <- rep(1)
str(shuttle)
head(shuttle)
shuttle$use1[shuttle$use == 'auto'] <- 0
head(shuttle)
sum(shuttle$use1)
nrow(shuttle)
quiz1 <- glm(use1~wind, family = "binomial", data = shuttle)
exp(quiz1$coef)
quiz1 <- glm((1-use1)~wind, family = "binomial", data = shuttle)
exp(quiz1$coef)
1/.777777
quiz1$coef
quiz1 <- glm(use1~wind, family = "binomial", data = shuttle)
quiz1$coef
(99+99)/(100+100)
99*999
install.packages("caret")
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
install.packages("appli")
install.packages("AppliedPredictiveModeling")
data(AlzheimersDisease)
data(AlzheimerDisease)
data(AlzheimerDisease)
library("AppliedPredictiveModeling", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
data(AlzheimerDisease)
names(AlzheimerDisease)
View(predictors)
adData = data.frame(diagnosis,predictors)
View(adData)
data(concrete)
set.seed(975)
View(mixtures)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing <- mixtures[-inTrain,]
qplot(CompressiveStrength, data = mixtures)
qplot(index ~CompressiveStrength, data = mixtures)
qplot(CompressiveStrength~index, data = mixtures)
plot(CompressiveStrength, data = mixtures)
plot(mixtures$CompressiveStrength)
cutCS <- cut2(mixtures$CompressiveStrength,g=5)
library("Hmisc", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
cutCS <- cut2(mixtures$CompressiveStrength,g=5)
plot(cutCS)
plot(cutCS,mitures$CompressiveStrength)
plot(cutCS,mixtures$CompressiveStrength)
plot(training$CompressieStrength)
plot(training$CompressiveStrength)
names(training)
plot(training$CompressiveStrength, colour = training$Age)
plot(training$CompressiveStrength, col = training$Age)
plot(training$CompressiveStrength, col = training$Cement)
plot(training$CompressiveStrength, col = training$Age)
plot(training$CompressiveStrength, col = training$Water)
plot(training$CompressiveStrength, col = training$FlyAsh)
head(training)
plot(training$CompressiveStrength, col = training$Age)
plot(training$CompressiveStrength, col = cut2(training$Water, 7))
plot(training$CompressiveStrength, col = cut2(training$Water, 3))
plot(training$CompressiveStrength, col = cut2(training$Cement, 3))
plot(training$CompressiveStrength, col = cut2(training$Cement, 5))
plot(training$CompressiveStrength, col = cut2(training$FineAggregate, 5))
plot(training$CompressiveStrength, col = training$Age
)
plot(training$CompressiveStrength, col = cut2(training$FlyAsh, 5))
View(training)
plot(training$CompressiveStrength, col = cut2(training$FlyAsh, 4))
plot(training$CompressiveStrength, col = cut2(training$Cement, 4))
cut2(training$Cement,4)
plot(training$CompressiveStrength, col = cut2(training$Cement, g = 4))
plot(training$CompressiveStrength, col = cut2(training$FlyAsh, g = 4))
plot(training$CompressiveStrength, col = cut2(training$Water, g = 4))
plot(training$CompressiveStrength, col = cut2(training$Superplasticizer, g = 4))
plot(training$CompressiveStrength, col = cut2(training$CoarseAggregate, g = 4))
plot(training$CompressiveStrength, col = cut2(training$FineAggregate, g = 4))
plot(training$CompressiveStrength, col = cut2(training$BlastFurnaceSlag, g = 4))
qplot(Superplasticizer, data = training)
qplot(log(Superplasticizer+1), data = training)
names(predictors)
set.seed(3433)
data(AlzheimerDisease)
preProc <- preProcess(predictors[,57:68], method = "pca")
preProc
?preProcess
preProc <- preProcess(predictors[,57:68], method = "pca", thresh = .80)
preProc
View(training)
View(predictors)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain <- createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
names(training)
training2 <- training[, c(1,58:69)]
names(training2)
modelFit <- train(training2$diagnosis~., method="glm")
modelFit <- train(diagnosis~.,data = training2, method="glm")
install.packages("e1071")
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
modelFit <- train(diagnosis~.,data = training2, method="glm")
fitControl <- trainControl(preProcOptions = list(thresh=0.8))
modelFit2 <- train(diagnosis ~ ., method="glm", trControl = fitControl, preProcess = "pca", data = training2)
modelFit
modelFit2
modelFit <- train(diagnosis~.,data = training2, method="glm", trControl = fitControl)
modelFit
